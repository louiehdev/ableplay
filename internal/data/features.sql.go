// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: features.sql

package data

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addFeature = `-- name: AddFeature :one
INSERT INTO features (created_at, updated_at, name, description, category)
VALUES (NOW(), NOW(), $1, $2, $3)
RETURNING id, created_at, updated_at, name, description, category
`

type AddFeatureParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Category    pgtype.Text `json:"category"`
}

func (q *Queries) AddFeature(ctx context.Context, arg AddFeatureParams) (Feature, error) {
	row := q.db.QueryRow(ctx, addFeature, arg.Name, arg.Description, arg.Category)
	var i Feature
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const deleteFeature = `-- name: DeleteFeature :exec
DELETE FROM features
WHERE id = $1
`

func (q *Queries) DeleteFeature(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFeature, id)
	return err
}

const getFeature = `-- name: GetFeature :one
SELECT id, name, description, category FROM features
WHERE id = $1
`

type GetFeatureRow struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Category    pgtype.Text `json:"category"`
}

func (q *Queries) GetFeature(ctx context.Context, id uuid.UUID) (GetFeatureRow, error) {
	row := q.db.QueryRow(ctx, getFeature, id)
	var i GetFeatureRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const getFeatures = `-- name: GetFeatures :many
SELECT id, name, description, category FROM features
`

type GetFeaturesRow struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Category    pgtype.Text `json:"category"`
}

func (q *Queries) GetFeatures(ctx context.Context) ([]GetFeaturesRow, error) {
	rows, err := q.db.Query(ctx, getFeatures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeaturesRow
	for rows.Next() {
		var i GetFeaturesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeature = `-- name: UpdateFeature :exec
UPDATE features SET 
    updated_at = NOW(),
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    category = COALESCE($4, category)
WHERE id = $1
    AND ($2 <> name OR $3 <> description OR $4 <> category)
`

type UpdateFeatureParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Category    pgtype.Text `json:"category"`
}

func (q *Queries) UpdateFeature(ctx context.Context, arg UpdateFeatureParams) error {
	_, err := q.db.Exec(ctx, updateFeature,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
	)
	return err
}
