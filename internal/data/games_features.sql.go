// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: games_features.sql

package data

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGameFeature = `-- name: CreateGameFeature :one
INSERT INTO games_features (created_at, updated_at, game_id, feature_id, notes, verified)
VALUES (NOW(), NOW(), $1, $2, $3, $4)
RETURNING id, created_at, updated_at, game_id, feature_id, notes, verified
`

type CreateGameFeatureParams struct {
	GameID    uuid.UUID   `json:"game_id"`
	FeatureID uuid.UUID   `json:"feature_id"`
	Notes     pgtype.Text `json:"notes"`
	Verified  bool        `json:"verified"`
}

func (q *Queries) CreateGameFeature(ctx context.Context, arg CreateGameFeatureParams) (GamesFeature, error) {
	row := q.db.QueryRow(ctx, createGameFeature,
		arg.GameID,
		arg.FeatureID,
		arg.Notes,
		arg.Verified,
	)
	var i GamesFeature
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameID,
		&i.FeatureID,
		&i.Notes,
		&i.Verified,
	)
	return i, err
}

const deleteGameFeature = `-- name: DeleteGameFeature :exec
DELETE FROM games_features
WHERE id = $1
`

func (q *Queries) DeleteGameFeature(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGameFeature, id)
	return err
}

const getFeaturesByGame = `-- name: GetFeaturesByGame :many
SELECT 
    games_features.id, games_features.notes, games_features.verified,
    features.id AS feature_id, features.name, features.description, features.category
FROM games_features
INNER JOIN features ON games_features.feature_id = features.id
WHERE games_features.game_id = $1
`

type GetFeaturesByGameRow struct {
	ID          uuid.UUID   `json:"id"`
	Notes       pgtype.Text `json:"notes"`
	Verified    bool        `json:"verified"`
	FeatureID   uuid.UUID   `json:"feature_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Category    pgtype.Text `json:"category"`
}

func (q *Queries) GetFeaturesByGame(ctx context.Context, gameID uuid.UUID) ([]GetFeaturesByGameRow, error) {
	rows, err := q.db.Query(ctx, getFeaturesByGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeaturesByGameRow
	for rows.Next() {
		var i GetFeaturesByGameRow
		if err := rows.Scan(
			&i.ID,
			&i.Notes,
			&i.Verified,
			&i.FeatureID,
			&i.Name,
			&i.Description,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGamesByFeature = `-- name: GetGamesByFeature :many
SELECT 
    games_features.id, games_features.notes, games_features.verified,
    games.id AS game_id, games.title, games.developer, games.publisher, games.release_year, games.platforms, games.description
FROM games_features
INNER JOIN games ON games_features.game_id = games.id
WHERE games_features.feature_id = $1
`

type GetGamesByFeatureRow struct {
	ID          uuid.UUID   `json:"id"`
	Notes       pgtype.Text `json:"notes"`
	Verified    bool        `json:"verified"`
	GameID      uuid.UUID   `json:"game_id"`
	Title       string      `json:"title"`
	Developer   pgtype.Text `json:"developer"`
	Publisher   pgtype.Text `json:"publisher"`
	ReleaseYear pgtype.Int4 `json:"release_year"`
	Platforms   []string    `json:"platforms"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) GetGamesByFeature(ctx context.Context, featureID uuid.UUID) ([]GetGamesByFeatureRow, error) {
	rows, err := q.db.Query(ctx, getGamesByFeature, featureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGamesByFeatureRow
	for rows.Next() {
		var i GetGamesByFeatureRow
		if err := rows.Scan(
			&i.ID,
			&i.Notes,
			&i.Verified,
			&i.GameID,
			&i.Title,
			&i.Developer,
			&i.Publisher,
			&i.ReleaseYear,
			&i.Platforms,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
