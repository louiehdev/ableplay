// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: games.sql

package data

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addGame = `-- name: AddGame :one
INSERT INTO games (created_at, updated_at, title, developer, publisher, release_year, platforms, description)
VALUES (NOW(), NOW(), $1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, title, developer, publisher, release_year, platforms, description
`

type AddGameParams struct {
	Title       string      `json:"title"`
	Developer   pgtype.Text `json:"developer"`
	Publisher   pgtype.Text `json:"publisher"`
	ReleaseYear pgtype.Int4 `json:"release_year"`
	Platforms   []string    `json:"platforms"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) AddGame(ctx context.Context, arg AddGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, addGame,
		arg.Title,
		arg.Developer,
		arg.Publisher,
		arg.ReleaseYear,
		arg.Platforms,
		arg.Description,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Developer,
		&i.Publisher,
		&i.ReleaseYear,
		&i.Platforms,
		&i.Description,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGame, id)
	return err
}

const getGame = `-- name: GetGame :one
SELECT id, title, developer, publisher, release_year, platforms, description FROM games
WHERE id = $1
`

type GetGameRow struct {
	ID          uuid.UUID   `json:"id"`
	Title       string      `json:"title"`
	Developer   pgtype.Text `json:"developer"`
	Publisher   pgtype.Text `json:"publisher"`
	ReleaseYear pgtype.Int4 `json:"release_year"`
	Platforms   []string    `json:"platforms"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) GetGame(ctx context.Context, id uuid.UUID) (GetGameRow, error) {
	row := q.db.QueryRow(ctx, getGame, id)
	var i GetGameRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Developer,
		&i.Publisher,
		&i.ReleaseYear,
		&i.Platforms,
		&i.Description,
	)
	return i, err
}

const getGames = `-- name: GetGames :many
SELECT id, title, developer, publisher, release_year, platforms, description FROM games
`

type GetGamesRow struct {
	ID          uuid.UUID   `json:"id"`
	Title       string      `json:"title"`
	Developer   pgtype.Text `json:"developer"`
	Publisher   pgtype.Text `json:"publisher"`
	ReleaseYear pgtype.Int4 `json:"release_year"`
	Platforms   []string    `json:"platforms"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) GetGames(ctx context.Context) ([]GetGamesRow, error) {
	rows, err := q.db.Query(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGamesRow
	for rows.Next() {
		var i GetGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Developer,
			&i.Publisher,
			&i.ReleaseYear,
			&i.Platforms,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :exec
UPDATE games SET 
    updated_at = NOW(),
    title = COALESCE($2, title),
    developer = COALESCE($3, developer),
    publisher = COALESCE($4, publisher),
    release_year = COALESCE($5, release_year),
    platforms = COALESCE($6, platforms),
    description = COALESCE($7, description)
WHERE id = $1
`

type UpdateGameParams struct {
	ID          uuid.UUID   `json:"id"`
	Title       string      `json:"title"`
	Developer   pgtype.Text `json:"developer"`
	Publisher   pgtype.Text `json:"publisher"`
	ReleaseYear pgtype.Int4 `json:"release_year"`
	Platforms   []string    `json:"platforms"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) error {
	_, err := q.db.Exec(ctx, updateGame,
		arg.ID,
		arg.Title,
		arg.Developer,
		arg.Publisher,
		arg.ReleaseYear,
		arg.Platforms,
		arg.Description,
	)
	return err
}
